<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YNAB Transformer</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <style>
        .drop-zone {
            border: 3px dashed #dee2e6;
            border-radius: 10px;
            padding: 3rem;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            background-color: #f8f9fa;
        }
        .drop-zone:hover {
            border-color: #0d6efd;
            background-color: #e7f1ff;
        }
        .drop-zone.dragover {
            border-color: #0d6efd;
            background-color: #e7f1ff;
            transform: scale(1.02);
        }
        .drop-zone.processing {
            border-color: #ffc107;
            background-color: #fff3cd;
            cursor: not-allowed;
        }
        .banner {
            margin-top: 1rem;
            padding: 1rem;
            border-radius: 0.375rem;
            display: none;
        }
        .banner.show {
            display: block;
        }
        .banner.success {
            background-color: #d1e7dd;
            border: 1px solid #badbcc;
            color: #0f5132;
        }
        .banner.error {
            background-color: #f8d7da;
            border: 1px solid #f5c2c7;
            color: #842029;
        }
        .loading-spinner {
            display: none;
        }
        .loading-spinner.show {
            display: inline-block;
        }
    </style>
</head>
<body>
    <div class="container mt-5" x-data="transformApp()">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <h1 class="text-center mb-4">YNAB Transformer</h1>
                <p class="text-center text-muted mb-4">
                    Upload your bank statement file and get a YNAB-compatible CSV in seconds
                </p>

                <!-- Drop Zone -->
                <div 
                    class="drop-zone"
                    :class="{ 'dragover': isDragOver, 'processing': isProcessing }"
                    @dragover.prevent="isDragOver = true"
                    @dragleave.prevent="isDragOver = false"
                    @drop.prevent="handleFileDrop($event)"
                    @click="!isProcessing && $refs.fileInput.click()"
                >
                    <div x-show="!isProcessing">
                        <i class="bi bi-cloud-upload" style="font-size: 3rem; color: #6c757d;"></i>
                        <h4 class="mt-3">Drop your file here</h4>
                        <p class="text-muted">or click to browse</p>
                        <p class="small text-muted">Supports Excel (.xlsx, .xls) and CSV files up to 1MB</p>
                    </div>
                    
                    <div x-show="isProcessing" class="text-center">
                        <div class="loading-spinner show">
                            <div class="spinner-border text-warning" role="status">
                                <span class="visually-hidden">Processing...</span>
                            </div>
                        </div>
                        <h4 class="mt-3">Processing your file...</h4>
                        <p class="text-muted">Please wait while we convert your bank statement</p>
                    </div>
                </div>

                <!-- Hidden File Input -->
                <input 
                    type="file" 
                    x-ref="fileInput" 
                    @change="handleFileSelect($event)"
                    accept=".xlsx,.xls,.csv"
                    style="display: none;"
                >

                <!-- Browse Button for Mobile -->
                <div class="text-center mt-3">
                    <button 
                        type="button" 
                        class="btn btn-outline-primary"
                        @click="!isProcessing && $refs.fileInput.click()"
                        :disabled="isProcessing"
                    >
                        Browse Files
                    </button>
                </div>

                <!-- Success Banner -->
                <div 
                    class="banner success"
                    :class="{ 'show': showSuccessBanner }"
                    x-show="showSuccessBanner"
                >
                    <strong>Success!</strong> Thank you for using this service. Your file has been processed and downloaded.
                </div>

                <!-- Error Banner -->
                <div 
                    class="banner error"
                    :class="{ 'show': showErrorBanner }"
                    x-show="showErrorBanner"
                >
                    <strong>Error:</strong> <span x-text="errorMessage"></span>
                </div>

                <!-- Privacy Policy Link -->
                <div class="text-center mt-5">
                    <small class="text-muted">
                        <a href="./privacy.html" target="_blank">Privacy Policy</a> - 
                        Your data is processed temporarily and never stored permanently
                    </small>
                </div>
            </div>
        </div>
    </div>

    <script>
        function transformApp() {
            return {
                isDragOver: false,
                isProcessing: false,
                showSuccessBanner: false,
                showErrorBanner: false,
                errorMessage: '',

                handleFileDrop(event) {
                    this.isDragOver = false;
                    const files = event.dataTransfer.files;
                    if (files.length > 0) {
                        this.processFile(files[0]);
                    }
                },

                handleFileSelect(event) {
                    const files = event.target.files;
                    if (files.length > 0) {
                        this.processFile(files[0]);
                    }
                },

                async processFile(file) {
                    // Validate file
                    if (!this.validateFile(file)) {
                        return;
                    }

                    this.isProcessing = true;
                    this.hideBanners();

                    try {
                        const formData = new FormData();
                        formData.append('file', file);
                        formData.append('auto_detect', 'true');

                        const response = await fetch('/transform', {
                            method: 'POST',
                            body: formData
                        });

                        if (response.ok) {
                            // File download response
                            const blob = await response.blob();
                            const url = window.URL.createObjectURL(blob);
                            const a = document.createElement('a');
                            a.href = url;
                            a.download = this.generateDownloadFilename(file.name);
                            document.body.appendChild(a);
                            a.click();
                            window.URL.revokeObjectURL(url);
                            document.body.removeChild(a);

                            // Show success banner
                            this.showSuccessBanner = true;
                            setTimeout(() => {
                                this.showSuccessBanner = false;
                            }, 4000);
                        } else {
                            // Error response
                            const errorData = await response.json();
                            this.showError(errorData.error || 'An error occurred');
                        }
                    } catch (error) {
                        this.showError('Network error. Please check your connection and try again.');
                    } finally {
                        this.isProcessing = false;
                    }
                },

                validateFile(file) {
                    // Check file size (1MB limit)
                    if (file.size > 1048576) {
                        this.showError('File size must be under 1MB');
                        return false;
                    }

                    // Check file type
                    const allowedTypes = [
                        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
                        'application/vnd.ms-excel', // .xls
                        'text/csv', // .csv
                        'application/csv' // .csv
                    ];

                    if (!allowedTypes.includes(file.type)) {
                        this.showError('Please upload an Excel (.xlsx, .xls) or CSV file');
                        return false;
                    }

                    return true;
                },

                showError(message) {
                    this.errorMessage = message;
                    this.showErrorBanner = true;
                    setTimeout(() => {
                        this.showErrorBanner = false;
                    }, 5000);
                },

                hideBanners() {
                    this.showSuccessBanner = false;
                    this.showErrorBanner = false;
                },

                generateDownloadFilename(originalName) {
                    const baseName = originalName.replace(/\.[^/.]+$/, '');
                    return `${baseName}-to-ynab.csv`;
                }
            }
        }
    </script>
</body>
</html>

